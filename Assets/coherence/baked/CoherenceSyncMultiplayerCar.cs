// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_fde46f4435c0d0c4f9f3326aa9feca8e_a931e17d_f3ca_48a2_98b4_43082adeb0a6 : PositionBinding
	{
		public override string CoherenceComponentName => "WorldPosition";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(coherenceSync.coherencePosition);
			set => coherenceSync.coherencePosition = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((WorldPosition)coherenceComponent).value;
			if (!coherenceSync.HasParentWithCoherenceSync)
            {
                value += floatingOriginDelta;
            }
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldPosition();
		}
	}

	public class Binding_fde46f4435c0d0c4f9f3326aa9feca8e_713ca226_dae0_44dc_990c_c54e395c8bb5 : RotationBinding
	{
		public override string CoherenceComponentName => "WorldOrientation";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Quaternion Value
		{
			get => (Quaternion)(UnityEngine.Quaternion)(coherenceSync.coherenceRotation);
			set => coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value);
		}

		protected override Quaternion ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((WorldOrientation)coherenceComponent).value;
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldOrientation)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldOrientation();
		}
	}

	public class Binding_fde46f4435c0d0c4f9f3326aa9feca8e_261a4878_fe87_4ddc_b523_e09a06599977 : ReferenceBinding
	{
		private onlineName CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (onlineName)UnityComponent;
		}
		public override string CoherenceComponentName => "MultiplayerCar_onlineName_6379893805495976556";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override SerializeEntityID Value
		{
			get => (SerializeEntityID)coherenceSync.MonoBridge.UnityObjectToEntityId(CastedUnityComponent.nameTagPrefab);
			set => CastedUnityComponent.nameTagPrefab = coherenceSync.MonoBridge.EntityIdToGameObject(value);
		}

		protected override SerializeEntityID ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((MultiplayerCar_onlineName_6379893805495976556)coherenceComponent).nameTagPrefab;
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (MultiplayerCar_onlineName_6379893805495976556)coherenceComponent;
			update.nameTagPrefab = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new MultiplayerCar_onlineName_6379893805495976556();
		}
	}

	public class Binding_fde46f4435c0d0c4f9f3326aa9feca8e_374479cc_2885_4bf0_baeb_f36290c89ada : StringBinding
	{
		private onlineName CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (onlineName)UnityComponent;
		}
		public override string CoherenceComponentName => "MultiplayerCar_onlineName_6379893805495976556";

		public override uint FieldMask => 0b00000000000000000000000000000010;

		public override string Value
		{
			get => (string)(System.String)(CastedUnityComponent.playerName);
			set => CastedUnityComponent.playerName = (System.String)(value);
		}

		protected override string ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((MultiplayerCar_onlineName_6379893805495976556)coherenceComponent).playerName;
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (MultiplayerCar_onlineName_6379893805495976556)coherenceComponent;
			update.playerName = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new MultiplayerCar_onlineName_6379893805495976556();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'MultiplayerCar' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncMultiplayerCar : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncMultiplayerCar>();
			if (coherenceSync.TryGetBindingByGuid("a931e17d-f3ca-48a2-98b4-43082adeb0a6", "position", out Binding InternalWorldPosition_Translation_value))
			{
				var clone = new Binding_fde46f4435c0d0c4f9f3326aa9feca8e_a931e17d_f3ca_48a2_98b4_43082adeb0a6();
				InternalWorldPosition_Translation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldPosition_Translation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).position");
			}
			if (coherenceSync.TryGetBindingByGuid("713ca226-dae0-44dc-990c-c54e395c8bb5", "rotation", out Binding InternalWorldOrientation_Rotation_value))
			{
				var clone = new Binding_fde46f4435c0d0c4f9f3326aa9feca8e_713ca226_dae0_44dc_990c_c54e395c8bb5();
				InternalWorldOrientation_Rotation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldOrientation_Rotation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).rotation");
			}
			if (coherenceSync.TryGetBindingByGuid("261a4878-fe87-4ddc-b523-e09a06599977", "nameTagPrefab", out Binding InternalMultiplayerCar_onlineName_6379893805495976556_MultiplayerCar_onlineName_6379893805495976556_nameTagPrefab))
			{
				var clone = new Binding_fde46f4435c0d0c4f9f3326aa9feca8e_261a4878_fe87_4ddc_b523_e09a06599977();
				InternalMultiplayerCar_onlineName_6379893805495976556_MultiplayerCar_onlineName_6379893805495976556_nameTagPrefab.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalMultiplayerCar_onlineName_6379893805495976556_MultiplayerCar_onlineName_6379893805495976556_nameTagPrefab)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (onlineName).nameTagPrefab");
			}
			if (coherenceSync.TryGetBindingByGuid("374479cc-2885-4bf0-baeb-f36290c89ada", "playerName", out Binding InternalMultiplayerCar_onlineName_6379893805495976556_MultiplayerCar_onlineName_6379893805495976556_playerName))
			{
				var clone = new Binding_fde46f4435c0d0c4f9f3326aa9feca8e_374479cc_2885_4bf0_baeb_f36290c89ada();
				InternalMultiplayerCar_onlineName_6379893805495976556_MultiplayerCar_onlineName_6379893805495976556_playerName.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalMultiplayerCar_onlineName_6379893805495976556_MultiplayerCar_onlineName_6379893805495976556_playerName)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (onlineName).playerName");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncMultiplayerCar] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
